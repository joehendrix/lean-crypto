tests/aes/SBox.lean:178:8: warning: declaration uses 'sorry'
goal: SubByte b = SubByte' b

query:
(define-sort GF256 () (_ BitVec 8))
(define-fun GF256.add ((a GF256) (b GF256)) GF256 (bvxor a b))
(define-fun |GF2BVPoly.polyMul.«8».«8»| ((a (_ BitVec 8)) (b (_ BitVec 8))) (_ BitVec 16) (let ((v (let ((v_1 (bvshl #b0000000000000000 #b0000000000000001))) (let ((v_1_1 (concat #b00000000 a))) (let ((v_1_1_1 (bvshl #b0000000000000000 #b0000000000000001))) (ite (= (not (= ((_ extract 7 7) b) #b0)) true) (bvxor v_1_1_1 v_1_1) v_1)))))) (let ((v_1 (let ((v_1_1 (bvshl v #b0000000000000001))) (let ((v_1_1_1 (concat #b00000000 a))) (let ((v_1_1_1_1 (bvshl v #b0000000000000001))) (ite (= (not (= ((_ extract 6 6) b) #b0)) true) (bvxor v_1_1_1_1 v_1_1_1) v_1_1)))))) (let ((v_2 (let ((v_2_1 (bvshl v_1 #b0000000000000001))) (let ((v_2_1_1 (concat #b00000000 a))) (let ((v_2_1_1_1 (bvshl v_1 #b0000000000000001))) (ite (= (not (= ((_ extract 5 5) b) #b0)) true) (bvxor v_2_1_1_1 v_2_1_1) v_2_1)))))) (let ((v_3 (let ((v_3_1 (bvshl v_2 #b0000000000000001))) (let ((v_3_1_1 (concat #b00000000 a))) (let ((v_3_1_1_1 (bvshl v_2 #b0000000000000001))) (ite (= (not (= ((_ extract 4 4) b) #b0)) true) (bvxor v_3_1_1_1 v_3_1_1) v_3_1)))))) (let ((v_4 (let ((v_4_1 (bvshl v_3 #b0000000000000001))) (let ((v_4_1_1 (concat #b00000000 a))) (let ((v_4_1_1_1 (bvshl v_3 #b0000000000000001))) (ite (= (not (= ((_ extract 3 3) b) #b0)) true) (bvxor v_4_1_1_1 v_4_1_1) v_4_1)))))) (let ((v_5 (let ((v_5_1 (bvshl v_4 #b0000000000000001))) (let ((v_5_1_1 (concat #b00000000 a))) (let ((v_5_1_1_1 (bvshl v_4 #b0000000000000001))) (ite (= (not (= ((_ extract 2 2) b) #b0)) true) (bvxor v_5_1_1_1 v_5_1_1) v_5_1)))))) (let ((v_6 (let ((v_6_1 (bvshl v_5 #b0000000000000001))) (let ((v_6_1_1 (concat #b00000000 a))) (let ((v_6_1_1_1 (bvshl v_5 #b0000000000000001))) (ite (= (not (= ((_ extract 1 1) b) #b0)) true) (bvxor v_6_1_1_1 v_6_1_1) v_6_1)))))) (let ((v_7 (let ((v_7_1 (bvshl v_6 #b0000000000000001))) (let ((v_7_1_1 (concat #b00000000 a))) (let ((v_7_1_1_1 (bvshl v_6 #b0000000000000001))) (ite (= (not (= ((_ extract 0 0) b) #b0)) true) (bvxor v_7_1_1_1 v_7_1_1) v_7_1)))))) v_7)))))))))
(declare-const b GF256)
(define-fun GF256.irreducible () (_ BitVec 9) #b100011011)
(define-fun |GF2BVPoly.polyMod.«16».«8»| ((x (_ BitVec 16)) (y (_ BitVec 9))) (_ BitVec 8) (let ((ret #b00000000)) (let ((pow (ite (= (not (= ((_ extract 8 8) #b000000001) #b0)) true) (bvxor #b000000001 y) #b000000001))) (let ((ret_1 (ite (= (not (= ((_ extract 0 0) x) #b0)) true) (bvxor ret (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow) #b00000000)) ret))) (let ((pow_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow #b000000001)) #b0)) true) (bvxor (bvshl pow #b000000001) y) (bvshl pow #b000000001)))) (let ((ret_2 (ite (= (not (= ((_ extract 1 1) x) #b0)) true) (bvxor ret_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_1) #b00000000)) ret_1))) (let ((pow_2 (ite (= (not (= ((_ extract 8 8) (bvshl pow_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_1 #b000000001) y) (bvshl pow_1 #b000000001)))) (let ((ret_3 (ite (= (not (= ((_ extract 2 2) x) #b0)) true) (bvxor ret_2 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_2) #b00000000)) ret_2))) (let ((pow_3 (ite (= (not (= ((_ extract 8 8) (bvshl pow_2 #b000000001)) #b0)) true) (bvxor (bvshl pow_2 #b000000001) y) (bvshl pow_2 #b000000001)))) (let ((ret_4 (ite (= (not (= ((_ extract 3 3) x) #b0)) true) (bvxor ret_3 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_3) #b00000000)) ret_3))) (let ((pow_4 (ite (= (not (= ((_ extract 8 8) (bvshl pow_3 #b000000001)) #b0)) true) (bvxor (bvshl pow_3 #b000000001) y) (bvshl pow_3 #b000000001)))) (let ((ret_5_1 (ite (= (not (= ((_ extract 4 4) x) #b0)) true) (bvxor ret_4 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_4) #b00000000)) ret_4))) (let ((pow_5_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_4 #b000000001)) #b0)) true) (bvxor (bvshl pow_4 #b000000001) y) (bvshl pow_4 #b000000001)))) (let ((ret_6 (ite (= (not (= ((_ extract 5 5) x) #b0)) true) (bvxor ret_5_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_5_1) #b00000000)) ret_5_1))) (let ((pow_6 (ite (= (not (= ((_ extract 8 8) (bvshl pow_5_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_5_1 #b000000001) y) (bvshl pow_5_1 #b000000001)))) (let ((ret_6_1 (ite (= (not (= ((_ extract 5 5) x) #b0)) true) (bvxor ret_5_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_5_1) #b00000000)) ret_5_1))) (let ((pow_6_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_5_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_5_1 #b000000001) y) (bvshl pow_5_1 #b000000001)))) (let ((ret_7 (ite (= (not (= ((_ extract 6 6) x) #b0)) true) (bvxor ret_6 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_6) #b00000000)) ret_6))) (let ((pow_7 (ite (= (not (= ((_ extract 8 8) (bvshl pow_6 #b000000001)) #b0)) true) (bvxor (bvshl pow_6 #b000000001) y) (bvshl pow_6 #b000000001)))) (let ((ret_7_1 (ite (= (not (= ((_ extract 6 6) x) #b0)) true) (bvxor ret_6_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_6_1) #b00000000)) ret_6_1))) (let ((pow_7_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_6_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_6_1 #b000000001) y) (bvshl pow_6_1 #b000000001)))) (let ((ret_8 (ite (= (not (= ((_ extract 7 7) x) #b0)) true) (bvxor ret_7 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_7) #b00000000)) ret_7))) (let ((pow_8 (ite (= (not (= ((_ extract 8 8) (bvshl pow_7 #b000000001)) #b0)) true) (bvxor (bvshl pow_7 #b000000001) y) (bvshl pow_7 #b000000001)))) (let ((ret_8_1 (ite (= (not (= ((_ extract 7 7) x) #b0)) true) (bvxor ret_7_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_7_1) #b00000000)) ret_7_1))) (let ((pow_8_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_7_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_7_1 #b000000001) y) (bvshl pow_7_1 #b000000001)))) (let ((ret_9 (ite (= (not (= ((_ extract 8 8) x) #b0)) true) (bvxor ret_8 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_8) #b00000000)) ret_8))) (let ((pow_9 (ite (= (not (= ((_ extract 8 8) (bvshl pow_8 #b000000001)) #b0)) true) (bvxor (bvshl pow_8 #b000000001) y) (bvshl pow_8 #b000000001)))) (let ((ret_9_1 (ite (= (not (= ((_ extract 8 8) x) #b0)) true) (bvxor ret_8_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_8_1) #b00000000)) ret_8_1))) (let ((pow_9_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_8_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_8_1 #b000000001) y) (bvshl pow_8_1 #b000000001)))) (let ((ret_5 (ite (= (not (= ((_ extract 9 9) x) #b0)) true) (bvxor ret_9_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_9_1) #b00000000)) ret_9_1))) (let ((pow_5 (ite (= (not (= ((_ extract 8 8) (bvshl pow_9_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_9_1 #b000000001) y) (bvshl pow_9_1 #b000000001)))) (let ((ret_10 (ite (= (not (= ((_ extract 10 10) x) #b0)) true) (bvxor ret_5 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_5) #b00000000)) ret_5))) (let ((pow_10 (ite (= (not (= ((_ extract 8 8) (bvshl pow_5 #b000000001)) #b0)) true) (bvxor (bvshl pow_5 #b000000001) y) (bvshl pow_5 #b000000001)))) (let ((ret_11 (ite (= (not (= ((_ extract 11 11) x) #b0)) true) (bvxor ret_10 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_10) #b00000000)) ret_10))) (let ((pow_11 (ite (= (not (= ((_ extract 8 8) (bvshl pow_10 #b000000001)) #b0)) true) (bvxor (bvshl pow_10 #b000000001) y) (bvshl pow_10 #b000000001)))) (let ((ret_12 (ite (= (not (= ((_ extract 12 12) x) #b0)) true) (bvxor ret_11 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_11) #b00000000)) ret_11))) (let ((pow_12 (ite (= (not (= ((_ extract 8 8) (bvshl pow_11 #b000000001)) #b0)) true) (bvxor (bvshl pow_11 #b000000001) y) (bvshl pow_11 #b000000001)))) (let ((ret_13 (ite (= (not (= ((_ extract 13 13) x) #b0)) true) (bvxor ret_12 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_12) #b00000000)) ret_12))) (let ((pow_13 (ite (= (not (= ((_ extract 8 8) (bvshl pow_12 #b000000001)) #b0)) true) (bvxor (bvshl pow_12 #b000000001) y) (bvshl pow_12 #b000000001)))) (let ((ret_14 (ite (= (not (= ((_ extract 14 14) x) #b0)) true) (bvxor ret_13 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_13) #b00000000)) ret_13))) (let ((pow_14 (ite (= (not (= ((_ extract 8 8) (bvshl pow_13 #b000000001)) #b0)) true) (bvxor (bvshl pow_13 #b000000001) y) (bvshl pow_13 #b000000001)))) (let ((ret_15 (ite (= (not (= ((_ extract 15 15) x) #b0)) true) (bvxor ret_14 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_14) #b00000000)) ret_14))) (let ((pow_15 (ite (= (not (= ((_ extract 8 8) (bvshl pow_14 #b000000001)) #b0)) true) (bvxor (bvshl pow_14 #b000000001) y) (bvshl pow_14 #b000000001)))) (ite (= y #b000000000) #b00000000 ret_15))))))))))))))))))))))))))))))))))))))))))))
(define-fun GF256.mul ((a GF256) (b GF256)) GF256 (|GF2BVPoly.polyMod.«16».«8»| (|GF2BVPoly.polyMul.«8».«8»| a b) GF256.irreducible))
(define-sort Nat () Int)
(define-fun Nat.sub ((x Nat) (y Nat)) Nat (ite (< x y) 0 (- x y)))
(assert (forall ((_uniq.27049 Nat)) (=> (>= _uniq.27049 0) (forall ((_uniq.27050 Nat)) (=> (>= _uniq.27050 0) (>= (Nat.sub _uniq.27049 _uniq.27050) 0))))))
(define-fun-rec GF256.pow2 ((k Nat) (x GF256)) GF256 (ite (= k 0) x (let ((v (GF256.pow2 (Nat.sub k 1) x))) (GF256.mul v v))))
(define-fun GF256.inverse ((x GF256)) GF256 (let ((v (GF256.pow2 7 x))) (let ((v (GF256.mul v (GF256.pow2 6 x)))) (let ((v (GF256.mul v (GF256.pow2 5 x)))) (let ((v (GF256.mul v (GF256.pow2 4 x)))) (let ((v (GF256.mul v (GF256.pow2 3 x)))) (let ((v (GF256.mul v (GF256.pow2 2 x)))) (let ((v (GF256.mul v (GF256.pow2 1 x)))) v))))))))
(define-fun xformByte ((b GF256)) GF256 (GF256.add (GF256.add (GF256.add (GF256.add (GF256.add (GF256.add #b00000000 #b01100011) (bvor (bvlshr b #b00000111) (bvshl b #b00000001))) (bvor (bvlshr b #b00000110) (bvshl b #b00000010))) (bvor (bvlshr b #b00000101) (bvshl b #b00000011))) (bvor (bvlshr b #b00000100) (bvshl b #b00000100))) b))
(define-fun SubByte ((b GF256)) GF256 (xformByte (GF256.inverse b)))
(define-fun |SubByte'| ((b GF256)) GF256 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 8) (_ BitVec 8))) #b00000000) #b00000000 #b01100011) #b00000001 #b01111100) #b00000010 #b01110111) #b00000011 #b01111011) #b00000100 #b11110010) #b00000101 #b01101011) #b00000110 #b01101111) #b00000111 #b11000101) #b00001000 #b00110000) #b00001001 #b00000001) #b00001010 #b01100111) #b00001011 #b00101011) #b00001100 #b11111110) #b00001101 #b11010111) #b00001110 #b10101011) #b00001111 #b01110110) #b00010000 #b11001010) #b00010001 #b10000010) #b00010010 #b11001001) #b00010011 #b01111101) #b00010100 #b11111010) #b00010101 #b01011001) #b00010110 #b01000111) #b00010111 #b11110000) #b00011000 #b10101101) #b00011001 #b11010100) #b00011010 #b10100010) #b00011011 #b10101111) #b00011100 #b10011100) #b00011101 #b10100100) #b00011110 #b01110010) #b00011111 #b11000000) #b00100000 #b10110111) #b00100001 #b11111101) #b00100010 #b10010011) #b00100011 #b00100110) #b00100100 #b00110110) #b00100101 #b00111111) #b00100110 #b11110111) #b00100111 #b11001100) #b00101000 #b00110100) #b00101001 #b10100101) #b00101010 #b11100101) #b00101011 #b11110001) #b00101100 #b01110001) #b00101101 #b11011000) #b00101110 #b00110001) #b00101111 #b00010101) #b00110000 #b00000100) #b00110001 #b11000111) #b00110010 #b00100011) #b00110011 #b11000011) #b00110100 #b00011000) #b00110101 #b10010110) #b00110110 #b00000101) #b00110111 #b10011010) #b00111000 #b00000111) #b00111001 #b00010010) #b00111010 #b10000000) #b00111011 #b11100010) #b00111100 #b11101011) #b00111101 #b00100111) #b00111110 #b10110010) #b00111111 #b01110101) #b01000000 #b00001001) #b01000001 #b10000011) #b01000010 #b00101100) #b01000011 #b00011010) #b01000100 #b00011011) #b01000101 #b01101110) #b01000110 #b01011010) #b01000111 #b10100000) #b01001000 #b01010010) #b01001001 #b00111011) #b01001010 #b11010110) #b01001011 #b10110011) #b01001100 #b00101001) #b01001101 #b11100011) #b01001110 #b00101111) #b01001111 #b10000100) #b01010000 #b01010011) #b01010001 #b11010001) #b01010010 #b00000000) #b01010011 #b11101101) #b01010100 #b00100000) #b01010101 #b11111100) #b01010110 #b10110001) #b01010111 #b01011011) #b01011000 #b01101010) #b01011001 #b11001011) #b01011010 #b10111110) #b01011011 #b00111001) #b01011100 #b01001010) #b01011101 #b01001100) #b01011110 #b01011000) #b01011111 #b11001111) #b01100000 #b11010000) #b01100001 #b11101111) #b01100010 #b10101010) #b01100011 #b11111011) #b01100100 #b01000011) #b01100101 #b01001101) #b01100110 #b00110011) #b01100111 #b10000101) #b01101000 #b01000101) #b01101001 #b11111001) #b01101010 #b00000010) #b01101011 #b01111111) #b01101100 #b01010000) #b01101101 #b00111100) #b01101110 #b10011111) #b01101111 #b10101000) #b01110000 #b01010001) #b01110001 #b10100011) #b01110010 #b01000000) #b01110011 #b10001111) #b01110100 #b10010010) #b01110101 #b10011101) #b01110110 #b00111000) #b01110111 #b11110101) #b01111000 #b10111100) #b01111001 #b10110110) #b01111010 #b11011010) #b01111011 #b00100001) #b01111100 #b00010000) #b01111101 #b11111111) #b01111110 #b11110011) #b01111111 #b11010010) #b10000000 #b11001101) #b10000001 #b00001100) #b10000010 #b00010011) #b10000011 #b11101100) #b10000100 #b01011111) #b10000101 #b10010111) #b10000110 #b01000100) #b10000111 #b00010111) #b10001000 #b11000100) #b10001001 #b10100111) #b10001010 #b01111110) #b10001011 #b00111101) #b10001100 #b01100100) #b10001101 #b01011101) #b10001110 #b00011001) #b10001111 #b01110011) #b10010000 #b01100000) #b10010001 #b10000001) #b10010010 #b01001111) #b10010011 #b11011100) #b10010100 #b00100010) #b10010101 #b00101010) #b10010110 #b10010000) #b10010111 #b10001000) #b10011000 #b01000110) #b10011001 #b11101110) #b10011010 #b10111000) #b10011011 #b00010100) #b10011100 #b11011110) #b10011101 #b01011110) #b10011110 #b00001011) #b10011111 #b11011011) #b10100000 #b11100000) #b10100001 #b00110010) #b10100010 #b00111010) #b10100011 #b00001010) #b10100100 #b01001001) #b10100101 #b00000110) #b10100110 #b00100100) #b10100111 #b01011100) #b10101000 #b11000010) #b10101001 #b11010011) #b10101010 #b10101100) #b10101011 #b01100010) #b10101100 #b10010001) #b10101101 #b10010101) #b10101110 #b11100100) #b10101111 #b01111001) #b10110000 #b11100111) #b10110001 #b11001000) #b10110010 #b00110111) #b10110011 #b01101101) #b10110100 #b10001101) #b10110101 #b11010101) #b10110110 #b01001110) #b10110111 #b10101001) #b10111000 #b01101100) #b10111001 #b01010110) #b10111010 #b11110100) #b10111011 #b11101010) #b10111100 #b01100101) #b10111101 #b01111010) #b10111110 #b10101110) #b10111111 #b00001000) #b11000000 #b10111010) #b11000001 #b01111000) #b11000010 #b00100101) #b11000011 #b00101110) #b11000100 #b00011100) #b11000101 #b10100110) #b11000110 #b10110100) #b11000111 #b11000110) #b11001000 #b11101000) #b11001001 #b11011101) #b11001010 #b01110100) #b11001011 #b00011111) #b11001100 #b01001011) #b11001101 #b10111101) #b11001110 #b10001011) #b11001111 #b10001010) #b11010000 #b01110000) #b11010001 #b00111110) #b11010010 #b10110101) #b11010011 #b01100110) #b11010100 #b01001000) #b11010101 #b00000011) #b11010110 #b11110110) #b11010111 #b00001110) #b11011000 #b01100001) #b11011001 #b00110101) #b11011010 #b01010111) #b11011011 #b10111001) #b11011100 #b10000110) #b11011101 #b11000001) #b11011110 #b00011101) #b11011111 #b10011110) #b11100000 #b11100001) #b11100001 #b11111000) #b11100010 #b10011000) #b11100011 #b00010001) #b11100100 #b01101001) #b11100101 #b11011001) #b11100110 #b10001110) #b11100111 #b10010100) #b11101000 #b10011011) #b11101001 #b00011110) #b11101010 #b10000111) #b11101011 #b11101001) #b11101100 #b11001110) #b11101101 #b01010101) #b11101110 #b00101000) #b11101111 #b11011111) #b11110000 #b10001100) #b11110001 #b10100001) #b11110010 #b10001001) #b11110011 #b00001101) #b11110100 #b10111111) #b11110101 #b11100110) #b11110110 #b01000010) #b11110111 #b01101000) #b11111000 #b01000001) #b11111001 #b10011001) #b11111010 #b00101101) #b11111011 #b00001111) #b11111100 #b10110000) #b11111101 #b01010100) #b11111110 #b10111011) #b11111111 #b00010110) b))
(assert (not (= (SubByte b) (|SubByte'| b))))
(check-sat)
tests/aes/SBox.lean:184:8: warning: declaration uses 'sorry'
goal: InvSubByte b = InvSubByte' b

query:
(define-sort GF256 () (_ BitVec 8))
(define-fun GF256.add ((a GF256) (b GF256)) GF256 (bvxor a b))
(define-fun GF256.irreducible () (_ BitVec 9) #b100011011)
(define-fun |GF2BVPoly.polyMod.«16».«8»| ((x (_ BitVec 16)) (y (_ BitVec 9))) (_ BitVec 8) (let ((ret #b00000000)) (let ((pow (ite (= (not (= ((_ extract 8 8) #b000000001) #b0)) true) (bvxor #b000000001 y) #b000000001))) (let ((ret_1 (ite (= (not (= ((_ extract 0 0) x) #b0)) true) (bvxor ret (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow) #b00000000)) ret))) (let ((pow_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow #b000000001)) #b0)) true) (bvxor (bvshl pow #b000000001) y) (bvshl pow #b000000001)))) (let ((ret_2 (ite (= (not (= ((_ extract 1 1) x) #b0)) true) (bvxor ret_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_1) #b00000000)) ret_1))) (let ((pow_2 (ite (= (not (= ((_ extract 8 8) (bvshl pow_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_1 #b000000001) y) (bvshl pow_1 #b000000001)))) (let ((ret_3 (ite (= (not (= ((_ extract 2 2) x) #b0)) true) (bvxor ret_2 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_2) #b00000000)) ret_2))) (let ((pow_3 (ite (= (not (= ((_ extract 8 8) (bvshl pow_2 #b000000001)) #b0)) true) (bvxor (bvshl pow_2 #b000000001) y) (bvshl pow_2 #b000000001)))) (let ((ret_4 (ite (= (not (= ((_ extract 3 3) x) #b0)) true) (bvxor ret_3 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_3) #b00000000)) ret_3))) (let ((pow_4 (ite (= (not (= ((_ extract 8 8) (bvshl pow_3 #b000000001)) #b0)) true) (bvxor (bvshl pow_3 #b000000001) y) (bvshl pow_3 #b000000001)))) (let ((ret_5_1 (ite (= (not (= ((_ extract 4 4) x) #b0)) true) (bvxor ret_4 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_4) #b00000000)) ret_4))) (let ((pow_5_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_4 #b000000001)) #b0)) true) (bvxor (bvshl pow_4 #b000000001) y) (bvshl pow_4 #b000000001)))) (let ((ret_6 (ite (= (not (= ((_ extract 5 5) x) #b0)) true) (bvxor ret_5_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_5_1) #b00000000)) ret_5_1))) (let ((pow_6 (ite (= (not (= ((_ extract 8 8) (bvshl pow_5_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_5_1 #b000000001) y) (bvshl pow_5_1 #b000000001)))) (let ((ret_6_1 (ite (= (not (= ((_ extract 5 5) x) #b0)) true) (bvxor ret_5_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_5_1) #b00000000)) ret_5_1))) (let ((pow_6_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_5_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_5_1 #b000000001) y) (bvshl pow_5_1 #b000000001)))) (let ((ret_7 (ite (= (not (= ((_ extract 6 6) x) #b0)) true) (bvxor ret_6 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_6) #b00000000)) ret_6))) (let ((pow_7 (ite (= (not (= ((_ extract 8 8) (bvshl pow_6 #b000000001)) #b0)) true) (bvxor (bvshl pow_6 #b000000001) y) (bvshl pow_6 #b000000001)))) (let ((ret_7_1 (ite (= (not (= ((_ extract 6 6) x) #b0)) true) (bvxor ret_6_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_6_1) #b00000000)) ret_6_1))) (let ((pow_7_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_6_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_6_1 #b000000001) y) (bvshl pow_6_1 #b000000001)))) (let ((ret_8 (ite (= (not (= ((_ extract 7 7) x) #b0)) true) (bvxor ret_7 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_7) #b00000000)) ret_7))) (let ((pow_8 (ite (= (not (= ((_ extract 8 8) (bvshl pow_7 #b000000001)) #b0)) true) (bvxor (bvshl pow_7 #b000000001) y) (bvshl pow_7 #b000000001)))) (let ((ret_8_1 (ite (= (not (= ((_ extract 7 7) x) #b0)) true) (bvxor ret_7_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_7_1) #b00000000)) ret_7_1))) (let ((pow_8_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_7_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_7_1 #b000000001) y) (bvshl pow_7_1 #b000000001)))) (let ((ret_9 (ite (= (not (= ((_ extract 8 8) x) #b0)) true) (bvxor ret_8 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_8) #b00000000)) ret_8))) (let ((pow_9 (ite (= (not (= ((_ extract 8 8) (bvshl pow_8 #b000000001)) #b0)) true) (bvxor (bvshl pow_8 #b000000001) y) (bvshl pow_8 #b000000001)))) (let ((ret_9_1 (ite (= (not (= ((_ extract 8 8) x) #b0)) true) (bvxor ret_8_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_8_1) #b00000000)) ret_8_1))) (let ((pow_9_1 (ite (= (not (= ((_ extract 8 8) (bvshl pow_8_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_8_1 #b000000001) y) (bvshl pow_8_1 #b000000001)))) (let ((ret_5 (ite (= (not (= ((_ extract 9 9) x) #b0)) true) (bvxor ret_9_1 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_9_1) #b00000000)) ret_9_1))) (let ((pow_5 (ite (= (not (= ((_ extract 8 8) (bvshl pow_9_1 #b000000001)) #b0)) true) (bvxor (bvshl pow_9_1 #b000000001) y) (bvshl pow_9_1 #b000000001)))) (let ((ret_10 (ite (= (not (= ((_ extract 10 10) x) #b0)) true) (bvxor ret_5 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_5) #b00000000)) ret_5))) (let ((pow_10 (ite (= (not (= ((_ extract 8 8) (bvshl pow_5 #b000000001)) #b0)) true) (bvxor (bvshl pow_5 #b000000001) y) (bvshl pow_5 #b000000001)))) (let ((ret_11 (ite (= (not (= ((_ extract 11 11) x) #b0)) true) (bvxor ret_10 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_10) #b00000000)) ret_10))) (let ((pow_11 (ite (= (not (= ((_ extract 8 8) (bvshl pow_10 #b000000001)) #b0)) true) (bvxor (bvshl pow_10 #b000000001) y) (bvshl pow_10 #b000000001)))) (let ((ret_12 (ite (= (not (= ((_ extract 12 12) x) #b0)) true) (bvxor ret_11 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_11) #b00000000)) ret_11))) (let ((pow_12 (ite (= (not (= ((_ extract 8 8) (bvshl pow_11 #b000000001)) #b0)) true) (bvxor (bvshl pow_11 #b000000001) y) (bvshl pow_11 #b000000001)))) (let ((ret_13 (ite (= (not (= ((_ extract 13 13) x) #b0)) true) (bvxor ret_12 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_12) #b00000000)) ret_12))) (let ((pow_13 (ite (= (not (= ((_ extract 8 8) (bvshl pow_12 #b000000001)) #b0)) true) (bvxor (bvshl pow_12 #b000000001) y) (bvshl pow_12 #b000000001)))) (let ((ret_14 (ite (= (not (= ((_ extract 14 14) x) #b0)) true) (bvxor ret_13 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_13) #b00000000)) ret_13))) (let ((pow_14 (ite (= (not (= ((_ extract 8 8) (bvshl pow_13 #b000000001)) #b0)) true) (bvxor (bvshl pow_13 #b000000001) y) (bvshl pow_13 #b000000001)))) (let ((ret_15 (ite (= (not (= ((_ extract 15 15) x) #b0)) true) (bvxor ret_14 (ite (<= (+ 0 1) 8) ((_ extract 7 0) pow_14) #b00000000)) ret_14))) (let ((pow_15 (ite (= (not (= ((_ extract 8 8) (bvshl pow_14 #b000000001)) #b0)) true) (bvxor (bvshl pow_14 #b000000001) y) (bvshl pow_14 #b000000001)))) (ite (= y #b000000000) #b00000000 ret_15))))))))))))))))))))))))))))))))))))))))))))
(define-fun |GF2BVPoly.polyMul.«8».«8»| ((a (_ BitVec 8)) (b (_ BitVec 8))) (_ BitVec 16) (let ((v (let ((v_1 (bvshl #b0000000000000000 #b0000000000000001))) (let ((v_1_1 (concat #b00000000 a))) (let ((v_1_1_1 (bvshl #b0000000000000000 #b0000000000000001))) (ite (= (not (= ((_ extract 7 7) b) #b0)) true) (bvxor v_1_1_1 v_1_1) v_1)))))) (let ((v_1 (let ((v_1_1 (bvshl v #b0000000000000001))) (let ((v_1_1_1 (concat #b00000000 a))) (let ((v_1_1_1_1 (bvshl v #b0000000000000001))) (ite (= (not (= ((_ extract 6 6) b) #b0)) true) (bvxor v_1_1_1_1 v_1_1_1) v_1_1)))))) (let ((v_2 (let ((v_2_1 (bvshl v_1 #b0000000000000001))) (let ((v_2_1_1 (concat #b00000000 a))) (let ((v_2_1_1_1 (bvshl v_1 #b0000000000000001))) (ite (= (not (= ((_ extract 5 5) b) #b0)) true) (bvxor v_2_1_1_1 v_2_1_1) v_2_1)))))) (let ((v_3 (let ((v_3_1 (bvshl v_2 #b0000000000000001))) (let ((v_3_1_1 (concat #b00000000 a))) (let ((v_3_1_1_1 (bvshl v_2 #b0000000000000001))) (ite (= (not (= ((_ extract 4 4) b) #b0)) true) (bvxor v_3_1_1_1 v_3_1_1) v_3_1)))))) (let ((v_4 (let ((v_4_1 (bvshl v_3 #b0000000000000001))) (let ((v_4_1_1 (concat #b00000000 a))) (let ((v_4_1_1_1 (bvshl v_3 #b0000000000000001))) (ite (= (not (= ((_ extract 3 3) b) #b0)) true) (bvxor v_4_1_1_1 v_4_1_1) v_4_1)))))) (let ((v_5 (let ((v_5_1 (bvshl v_4 #b0000000000000001))) (let ((v_5_1_1 (concat #b00000000 a))) (let ((v_5_1_1_1 (bvshl v_4 #b0000000000000001))) (ite (= (not (= ((_ extract 2 2) b) #b0)) true) (bvxor v_5_1_1_1 v_5_1_1) v_5_1)))))) (let ((v_6 (let ((v_6_1 (bvshl v_5 #b0000000000000001))) (let ((v_6_1_1 (concat #b00000000 a))) (let ((v_6_1_1_1 (bvshl v_5 #b0000000000000001))) (ite (= (not (= ((_ extract 1 1) b) #b0)) true) (bvxor v_6_1_1_1 v_6_1_1) v_6_1)))))) (let ((v_7 (let ((v_7_1 (bvshl v_6 #b0000000000000001))) (let ((v_7_1_1 (concat #b00000000 a))) (let ((v_7_1_1_1 (bvshl v_6 #b0000000000000001))) (ite (= (not (= ((_ extract 0 0) b) #b0)) true) (bvxor v_7_1_1_1 v_7_1_1) v_7_1)))))) v_7)))))))))
(define-fun GF256.mul ((a GF256) (b GF256)) GF256 (|GF2BVPoly.polyMod.«16».«8»| (|GF2BVPoly.polyMul.«8».«8»| a b) GF256.irreducible))
(define-sort Nat () Int)
(define-fun Nat.sub ((x Nat) (y Nat)) Nat (ite (< x y) 0 (- x y)))
(assert (forall ((_uniq.37517 Nat)) (=> (>= _uniq.37517 0) (forall ((_uniq.37518 Nat)) (=> (>= _uniq.37518 0) (>= (Nat.sub _uniq.37517 _uniq.37518) 0))))))
(define-fun-rec GF256.pow2 ((k Nat) (x GF256)) GF256 (ite (= k 0) x (let ((v (GF256.pow2 (Nat.sub k 1) x))) (GF256.mul v v))))
(define-fun GF256.inverse ((x GF256)) GF256 (let ((v (GF256.pow2 7 x))) (let ((v (GF256.mul v (GF256.pow2 6 x)))) (let ((v (GF256.mul v (GF256.pow2 5 x)))) (let ((v (GF256.mul v (GF256.pow2 4 x)))) (let ((v (GF256.mul v (GF256.pow2 3 x)))) (let ((v (GF256.mul v (GF256.pow2 2 x)))) (let ((v (GF256.mul v (GF256.pow2 1 x)))) v))))))))
(define-fun |xformByte'| ((b GF256)) GF256 (GF256.add (GF256.add (GF256.add (GF256.add #b00000000 #b00000101) (bvor (bvlshr b #b00000111) (bvshl b #b00000001))) (bvor (bvlshr b #b00000101) (bvshl b #b00000011))) (bvor (bvlshr b #b00000010) (bvshl b #b00000110))))
(define-fun InvSubByte ((b GF256)) GF256 (GF256.inverse (|xformByte'| b)))
(define-fun |InvSubByte'| ((b GF256)) GF256 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 8) (_ BitVec 8))) #b00000000) #b00000000 #b01010010) #b00000001 #b00001001) #b00000010 #b01101010) #b00000011 #b11010101) #b00000100 #b00110000) #b00000101 #b00110110) #b00000110 #b10100101) #b00000111 #b00111000) #b00001000 #b10111111) #b00001001 #b01000000) #b00001010 #b10100011) #b00001011 #b10011110) #b00001100 #b10000001) #b00001101 #b11110011) #b00001110 #b11010111) #b00001111 #b11111011) #b00010000 #b01111100) #b00010001 #b11100011) #b00010010 #b00111001) #b00010011 #b10000010) #b00010100 #b10011011) #b00010101 #b00101111) #b00010110 #b11111111) #b00010111 #b10000111) #b00011000 #b00110100) #b00011001 #b10001110) #b00011010 #b01000011) #b00011011 #b01000100) #b00011100 #b11000100) #b00011101 #b11011110) #b00011110 #b11101001) #b00011111 #b11001011) #b00100000 #b01010100) #b00100001 #b01111011) #b00100010 #b10010100) #b00100011 #b00110010) #b00100100 #b10100110) #b00100101 #b11000010) #b00100110 #b00100011) #b00100111 #b00111101) #b00101000 #b11101110) #b00101001 #b01001100) #b00101010 #b10010101) #b00101011 #b00001011) #b00101100 #b01000010) #b00101101 #b11111010) #b00101110 #b11000011) #b00101111 #b01001110) #b00110000 #b00001000) #b00110001 #b00101110) #b00110010 #b10100001) #b00110011 #b01100110) #b00110100 #b00101000) #b00110101 #b11011001) #b00110110 #b00100100) #b00110111 #b10110010) #b00111000 #b01110110) #b00111001 #b01011011) #b00111010 #b10100010) #b00111011 #b01001001) #b00111100 #b01101101) #b00111101 #b10001011) #b00111110 #b11010001) #b00111111 #b00100101) #b01000000 #b01110010) #b01000001 #b11111000) #b01000010 #b11110110) #b01000011 #b01100100) #b01000100 #b10000110) #b01000101 #b01101000) #b01000110 #b10011000) #b01000111 #b00010110) #b01001000 #b11010100) #b01001001 #b10100100) #b01001010 #b01011100) #b01001011 #b11001100) #b01001100 #b01011101) #b01001101 #b01100101) #b01001110 #b10110110) #b01001111 #b10010010) #b01010000 #b01101100) #b01010001 #b01110000) #b01010010 #b01001000) #b01010011 #b01010000) #b01010100 #b11111101) #b01010101 #b11101101) #b01010110 #b10111001) #b01010111 #b11011010) #b01011000 #b01011110) #b01011001 #b00010101) #b01011010 #b01000110) #b01011011 #b01010111) #b01011100 #b10100111) #b01011101 #b10001101) #b01011110 #b10011101) #b01011111 #b10000100) #b01100000 #b10010000) #b01100001 #b11011000) #b01100010 #b10101011) #b01100011 #b00000000) #b01100100 #b10001100) #b01100101 #b10111100) #b01100110 #b11010011) #b01100111 #b00001010) #b01101000 #b11110111) #b01101001 #b11100100) #b01101010 #b01011000) #b01101011 #b00000101) #b01101100 #b10111000) #b01101101 #b10110011) #b01101110 #b01000101) #b01101111 #b00000110) #b01110000 #b11010000) #b01110001 #b00101100) #b01110010 #b00011110) #b01110011 #b10001111) #b01110100 #b11001010) #b01110101 #b00111111) #b01110110 #b00001111) #b01110111 #b00000010) #b01111000 #b11000001) #b01111001 #b10101111) #b01111010 #b10111101) #b01111011 #b00000011) #b01111100 #b00000001) #b01111101 #b00010011) #b01111110 #b10001010) #b01111111 #b01101011) #b10000000 #b00111010) #b10000001 #b10010001) #b10000010 #b00010001) #b10000011 #b01000001) #b10000100 #b01001111) #b10000101 #b01100111) #b10000110 #b11011100) #b10000111 #b11101010) #b10001000 #b10010111) #b10001001 #b11110010) #b10001010 #b11001111) #b10001011 #b11001110) #b10001100 #b11110000) #b10001101 #b10110100) #b10001110 #b11100110) #b10001111 #b01110011) #b10010000 #b10010110) #b10010001 #b10101100) #b10010010 #b01110100) #b10010011 #b00100010) #b10010100 #b11100111) #b10010101 #b10101101) #b10010110 #b00110101) #b10010111 #b10000101) #b10011000 #b11100010) #b10011001 #b11111001) #b10011010 #b00110111) #b10011011 #b11101000) #b10011100 #b00011100) #b10011101 #b01110101) #b10011110 #b11011111) #b10011111 #b01101110) #b10100000 #b01000111) #b10100001 #b11110001) #b10100010 #b00011010) #b10100011 #b01110001) #b10100100 #b00011101) #b10100101 #b00101001) #b10100110 #b11000101) #b10100111 #b10001001) #b10101000 #b01101111) #b10101001 #b10110111) #b10101010 #b01100010) #b10101011 #b00001110) #b10101100 #b10101010) #b10101101 #b00011000) #b10101110 #b10111110) #b10101111 #b00011011) #b10110000 #b11111100) #b10110001 #b01010110) #b10110010 #b00111110) #b10110011 #b01001011) #b10110100 #b11000110) #b10110101 #b11010010) #b10110110 #b01111001) #b10110111 #b00100000) #b10111000 #b10011010) #b10111001 #b11011011) #b10111010 #b11000000) #b10111011 #b11111110) #b10111100 #b01111000) #b10111101 #b11001101) #b10111110 #b01011010) #b10111111 #b11110100) #b11000000 #b00011111) #b11000001 #b11011101) #b11000010 #b10101000) #b11000011 #b00110011) #b11000100 #b10001000) #b11000101 #b00000111) #b11000110 #b11000111) #b11000111 #b00110001) #b11001000 #b10110001) #b11001001 #b00010010) #b11001010 #b00010000) #b11001011 #b01011001) #b11001100 #b00100111) #b11001101 #b10000000) #b11001110 #b11101100) #b11001111 #b01011111) #b11010000 #b01100000) #b11010001 #b01010001) #b11010010 #b01111111) #b11010011 #b10101001) #b11010100 #b00011001) #b11010101 #b10110101) #b11010110 #b01001010) #b11010111 #b00001101) #b11011000 #b00101101) #b11011001 #b11100101) #b11011010 #b01111010) #b11011011 #b10011111) #b11011100 #b10010011) #b11011101 #b11001001) #b11011110 #b10011100) #b11011111 #b11101111) #b11100000 #b10100000) #b11100001 #b11100000) #b11100010 #b00111011) #b11100011 #b01001101) #b11100100 #b10101110) #b11100101 #b00101010) #b11100110 #b11110101) #b11100111 #b10110000) #b11101000 #b11001000) #b11101001 #b11101011) #b11101010 #b10111011) #b11101011 #b00111100) #b11101100 #b10000011) #b11101101 #b01010011) #b11101110 #b10011001) #b11101111 #b01100001) #b11110000 #b00010111) #b11110001 #b00101011) #b11110010 #b00000100) #b11110011 #b01111110) #b11110100 #b10111010) #b11110101 #b01110111) #b11110110 #b11010110) #b11110111 #b00100110) #b11111000 #b11100001) #b11111001 #b01101001) #b11111010 #b00010100) #b11111011 #b01100011) #b11111100 #b01010101) #b11111101 #b00100001) #b11111110 #b00001100) #b11111111 #b01111101) b))
(declare-const b GF256)
(assert (not (= (InvSubByte b) (|InvSubByte'| b))))
(check-sat)
tests/aes/SBox.lean:226:8: warning: declaration uses 'sorry'
